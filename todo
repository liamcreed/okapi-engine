TODO:

GOALS: 2d rendenderer with simple physics and collision -> 3d collision




general:
    check for creating if everthing is initialized

    shaders not inside renderer but inside game loop; 
    in renderer start loop through array of shaders and set matrices;
    when draw quad, model etc, specify what shader

    SHADING DOESNT WORK (kinda)

    fix thing with freeing texture when texture data is from array it doesnt need to be free

    ADD COMMENTS

    GLTF parsing in seperate file

Math:
    - return matrix instead of multiplying and only multpily when necessery
    - multiply mat4 with a vector
    - dot product quat
    - more funcs for structs
    - dont multiply if matrix is mat4_new;
    - rotation on camera direction axis

Lighting:
    - lighting system multiple lights;
    - Shadows only for directtional light
    - Bloom
    - mist https://www.youtube.com/watch?v=qslBNLeSPUc

OPengl:
    - rework frambuffer system
    - uniform buffer matrices
    - geometry shader for skeletons
    - Framebuffer alpha transparency
    - vertex array attrubute type in function
    - inversing matrix 3D on the cpu
    - Instanced renderering
    
2D renderer:
    - QUAD batched
    - UI
    
GLTF:   
    - export gltf data as binary
    - Identical meshes
    - Lights
    - Mesh name identification for ECS
    
    
Window:
    - window resize    create framebuffer again;
    - scroll input
    - clean up
    
Post processing:
    Chromatic abberation
    vec3 col;
    float amount = 0.002;
    col.r = texture( u_texture, vec2(v_uv.x + amount,v_uv.y)).r;
    col.g = texture(u_texture, v_uv).g;
    col.b = texture( u_texture, vec2(v_uv.x-amount,v_uv.y)).b;

	col *= (1.0 - amount * 0.5);
    
    f_color = vec4(col,1); 